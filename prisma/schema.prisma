// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.String
    refresh_token_expires_in Int?
    access_token             String? @db.String
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.String
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accounts Account[]
    sessions Session[]
    Grocery  Grocery[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Grocery {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    barcode      String
    name         String
    desc         String?
    status       Status   @default(UPCOMING)
    userId       String   @db.ObjectId
    image        String   @default("")
    manufactured DateTime @default(now())
    expiry       DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    categoryIDs String[]   @db.ObjectId
    categories  Category[] @relation(fields: [categoryIDs], references: [id])
    user        User       @relation(fields: [userId], references: [id])
}

model Category {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    desc       String?
    icon       String
    groceryIDs String[] @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    groceries Grocery[] @relation(fields: [groceryIDs], references: [id])
}

enum Status {
    UPCOMING
    EXPIRED
    CONSUMED
}

model Keys {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    name   String  @unique
    secret String
    desc   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
